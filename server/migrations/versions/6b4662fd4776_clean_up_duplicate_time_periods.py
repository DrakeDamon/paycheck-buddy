"""Clean up duplicate time periods

Revision ID: 6b4662fd4776
Revises: 16e47959690b
Create Date: 2025-05-03 18:17:41.481951

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import Session
from sqlalchemy import text

# revision identifiers, used by Alembic.
revision = '6b4662fd4776'
down_revision = '16e47959690b'
branch_labels = None
depends_on = None


def upgrade():
    # Create a connection
    connection = op.get_bind()
    
    # First, deduplicate time periods based on type
    connection.execute(
        text("""
        -- Create a temporary table to track primary periods
        CREATE TEMPORARY TABLE primary_periods AS
        SELECT MIN(id) as keep_id, type
        FROM time_periods
        GROUP BY type;
        
        -- Update expenses to point to the primary period for each type
        UPDATE expenses
        SET time_period_id = (
            SELECT keep_id FROM primary_periods
            WHERE primary_periods.type = (
                SELECT type FROM time_periods WHERE id = expenses.time_period_id
            )
        )
        WHERE time_period_id IN (
            SELECT time_periods.id FROM time_periods
            LEFT JOIN primary_periods ON time_periods.id = primary_periods.keep_id
            WHERE primary_periods.keep_id IS NULL
        );
        
        -- Update paychecks to point to the primary period for each type
        UPDATE paychecks
        SET time_period_id = (
            SELECT keep_id FROM primary_periods
            WHERE primary_periods.type = (
                SELECT type FROM time_periods WHERE id = paychecks.time_period_id
            )
        )
        WHERE time_period_id IN (
            SELECT time_periods.id FROM time_periods
            LEFT JOIN primary_periods ON time_periods.id = primary_periods.keep_id
            WHERE primary_periods.keep_id IS NULL
        );
        
        -- Delete the duplicate periods
        DELETE FROM time_periods
        WHERE id NOT IN (SELECT keep_id FROM primary_periods);
        
        -- Drop the temporary table
        DROP TABLE primary_periods;
        """)
    )
    
    # Now proceed with the schema changes
    with op.batch_alter_table('time_periods', schema=None) as batch_op:
        batch_op.create_unique_constraint(None, ['type'])
        batch_op.drop_column('name')


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('time_periods', schema=None) as batch_op:
        batch_op.add_column(sa.Column('name', sa.VARCHAR(length=80), nullable=False))
        batch_op.drop_constraint(None, type_='unique')

    # ### end Alembic commands ###
    
    # In the downgrade, we need to populate the name column with values
    connection = op.get_bind()
    connection.execute(
        text("UPDATE time_periods SET name = type")
    )